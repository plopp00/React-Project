{"ast":null,"code":"import _slicedToArray from \"D:\\\\SkolaReact\\\\react-project\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"D:\\\\SkolaReact\\\\react-project\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\SkolaReact\\\\react-project\\\\front-end\\\\src\\\\Components\\\\Main\\\\Store.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport { getToken, isLoggedIn } from \"../AuthHelper\";\nexport const CTX = React.createContext();\nconst initState = {\n  general: [{\n    from: 'Kalle',\n    msg: 'Hallå!!'\n  }],\n  topic2: [{\n    from: 'Stefan',\n    msg: 'Hej!!'\n  }]\n};\n\nfunction reducer(state, action) {\n  const _action$payload = action.payload,\n        from = _action$payload.from,\n        msg = _action$payload.msg,\n        topic = _action$payload.topic;\n\n  switch (action.type) {\n    case 'RECIEVE_MESSAGE':\n      return _objectSpread({}, state, {\n        [topic]: [...state[topic], {\n          from,\n          msg\n        }]\n      });\n\n    default:\n      return state;\n  }\n}\n\nlet socket;\n\nfunction sendChatAction(value) {\n  socket.emit('chat message', value);\n}\n\nexport default function Store(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        count = _useState2[0],\n        setCount = _useState2[1];\n\n  if (count === '' && isLoggedIn()) {\n    axios({\n      method: 'get',\n      url: 'http://localhost:3010/getname',\n      headers: {\n        authorization: 'Bearer ' + getToken()\n      }\n    }).then(res => {\n      cons;\n      setCount(res.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  const _React$useReducer = React.useReducer(reducer, initState),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        allChats = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  if (!socket) {\n    socket = io(':3001');\n    socket.on('chat message', function (msg) {\n      dispatch({\n        type: 'RECIEVE_MESSAGE',\n        payload: msg\n      });\n    });\n  }\n\n  ;\n  const user = {\n    count\n  }.count;\n  return React.createElement(CTX.Provider, {\n    value: {\n      allChats,\n      sendChatAction,\n      user\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, props.children);\n}","map":{"version":3,"sources":["D:\\SkolaReact\\react-project\\front-end\\src\\Components\\Main\\Store.js"],"names":["React","useState","io","axios","getToken","isLoggedIn","CTX","createContext","initState","general","from","msg","topic2","reducer","state","action","payload","topic","type","socket","sendChatAction","value","emit","Store","props","count","setCount","method","url","headers","authorization","then","res","cons","data","catch","error","console","log","useReducer","allChats","dispatch","on","user","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,UAAlB,QAAmC,eAAnC;AAEA,OAAO,MAAMC,GAAG,GAAGN,KAAK,CAACO,aAAN,EAAZ;AAEP,MAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE,CACL;AAACC,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GADK,CADK;AAIdC,EAAAA,MAAM,EAAE,CACJ;AAACF,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE;AAAtB,GADI;AAJM,CAAlB;;AASA,SAASE,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAAA,0BACAA,MAAM,CAACC,OADP;AAAA,QACpBN,IADoB,mBACpBA,IADoB;AAAA,QACdC,GADc,mBACdA,GADc;AAAA,QACTM,KADS,mBACTA,KADS;;AAE3B,UAAOF,MAAM,CAACG,IAAd;AACI,SAAK,iBAAL;AACI,+BACOJ,KADP;AAEI,SAACG,KAAD,GAAS,CACL,GAAGH,KAAK,CAACG,KAAD,CADH,EAEL;AAACP,UAAAA,IAAD;AAAMC,UAAAA;AAAN,SAFK;AAFb;;AAOJ;AACI,aAAOG,KAAP;AAVR;AAYH;;AAED,IAAIK,MAAJ;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAC1BF,EAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA4BD,KAA5B;AACH;;AAED,eAAe,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAAA,oBACPvB,QAAQ,CAAC,EAAD,CADD;AAAA;AAAA,QAC1BwB,KAD0B;AAAA,QACnBC,QADmB;;AAGjC,MAAID,KAAK,KAAK,EAAV,IAAgBpB,UAAU,EAA9B,EAAkC;AAC9BF,IAAAA,KAAK,CACL;AACIwB,MAAAA,MAAM,EAAE,KADZ;AAEQC,MAAAA,GAAG,EAAE,+BAFb;AAGIC,MAAAA,OAAO,EAAE;AACTC,QAAAA,aAAa,EAAE,YAAY1B,QAAQ;AAD1B;AAHb,KADK,CAAL,CASK2B,IATL,CASUC,GAAG,IAAI;AACTC,MAAAA,IAAI;AACJP,MAAAA,QAAQ,CAACM,GAAG,CAACE,IAAL,CAAR;AACH,KAZL,EAaKC,KAbL,CAaW,UAAUC,KAAV,EAAiB;AAEpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAhBL;AAkBH;;AAtBgC,4BAyBJpC,KAAK,CAACuC,UAAN,CAAiB1B,OAAjB,EAA0BL,SAA1B,CAzBI;AAAA;AAAA,QAyB1BgC,QAzB0B;AAAA,QAyBhBC,QAzBgB;;AA0BjC,MAAI,CAACtB,MAAL,EAAa;AACTA,IAAAA,MAAM,GAAGjB,EAAE,CAAC,OAAD,CAAX;AACAiB,IAAAA,MAAM,CAACuB,EAAP,CAAU,cAAV,EAA0B,UAAU/B,GAAV,EAAe;AACrC8B,MAAAA,QAAQ,CAAC;AAACvB,QAAAA,IAAI,EAAE,iBAAP;AAA0BF,QAAAA,OAAO,EAAEL;AAAnC,OAAD,CAAR;AACH,KAFD;AAEG;;AAAA;AAIH,QAAMgC,IAAI,GAAG;AAAClB,IAAAA;AAAD,IAAQA,KAArB;AAEC,SACI,oBAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAE;AAACe,MAAAA,QAAD;AAAWpB,MAAAA,cAAX;AAA2BuB,MAAAA;AAA3B,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,KAAK,CAACoB,QADX,CADJ;AAUR","sourcesContent":["import React, { useState} from 'react'\r\nimport io from 'socket.io-client'\r\nimport axios from 'axios'\r\nimport {getToken, isLoggedIn} from \"../AuthHelper\";\r\n\r\nexport const CTX = React.createContext();\r\n\r\nconst initState = {\r\n    general: [\r\n        {from: 'Kalle', msg: 'Hallå!!'},\r\n    ],\r\n    topic2: [\r\n        {from: 'Stefan', msg: 'Hej!!'},\r\n    ]\r\n}\r\n\r\nfunction reducer(state, action){\r\n    const {from, msg, topic} = action.payload;\r\n    switch(action.type) {\r\n        case 'RECIEVE_MESSAGE':\r\n            return{\r\n                ...state,\r\n                [topic]: [\r\n                    ...state[topic],\r\n                    {from,msg}\r\n                ]\r\n             }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet socket;\r\n\r\nfunction sendChatAction(value){\r\n    socket.emit('chat message', value);\r\n}\r\n\r\nexport default function Store(props) {\r\n    const [count, setCount] = useState('');\r\n\r\n    if (count === '' && isLoggedIn()) {\r\n        axios(\r\n        {\r\n            method: 'get',\r\n                url: 'http://localhost:3010/getname',\r\n            headers: {\r\n            authorization: 'Bearer ' + getToken()\r\n        }\r\n\r\n        })\r\n            .then(res => {\r\n                cons\r\n                setCount(res.data)\r\n            })\r\n            .catch(function (error) {\r\n\r\n                console.log(error);\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const [allChats, dispatch] = React.useReducer(reducer, initState)\r\n    if (!socket) {\r\n        socket = io(':3001');\r\n        socket.on('chat message', function (msg) {\r\n            dispatch({type: 'RECIEVE_MESSAGE', payload: msg});\r\n        })};\r\n\r\n\r\n\r\n        const user = {count}.count\r\n\r\n         return (\r\n             <CTX.Provider value={{allChats, sendChatAction, user}}>\r\n                 {props.children}\r\n             </CTX.Provider>\r\n         )\r\n\r\n\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}